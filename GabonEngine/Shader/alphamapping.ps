////////////////////////////////////////////////////////////////////////////////
// Filename: texture.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture[3];
SamplerState SampleType
{
	Filter = ANISOTROPIC;
	MaxAnisotropy = 4;

	AddressU = WRAP;
	AddressV = WRAP;
};

cbuffer DirLightBufferType
{
	float4 ambientColor;	
	float4 diffuseColor;
	float4 specularColor;
	float3 lightDirection;
	float specularPower;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 main(PixelInputType input) : SV_TARGET
{
	float4 color1, color2, alphaColor, finalColor;

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    color1 = shaderTexture[0].Sample(SampleType, input.tex);
	color2 = shaderTexture[1].Sample(SampleType, input.tex);
	alphaColor = shaderTexture[2].Sample(SampleType, input.tex);
	finalColor = color1 * alphaColor + color2 * (1.0f - alphaColor);
	finalColor = saturate(finalColor);
    return finalColor;	
}
