////////////////////////////////////////////////////////////////////////////////
// Filename: texture.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture[2];
SamplerState SampleType
{
	Filter = ANISOTROPIC;
	MaxAnisotropy = 4;

	AddressU = WRAP;
	AddressV = WRAP;
};

cbuffer DirLightBufferType
{
	float4 ambientColor;	
	float4 diffuseColor;
	float4 specularColor;
	float3 lightDirection;
	float specularPower;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 tangent : TANGENT;
	float3 binormal : BINORMAL;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 main(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
    float4 bumpMap;
    float3 bumpNormal;
    float3 lightDir;
    float lightIntensity;
    float4 color;

	// base color
	textureColor = shaderTexture[0].Sample(SampleType, input.tex);
	// bump
	bumpMap = shaderTexture[1].Sample(SampleType, input.tex);

	// map from (0, 1) -> (-1, 1)
    bumpMap = (bumpMap * 2.0f) - 1.0f;

	// normal
	bumpNormal = bumpMap.x * input.tangent + bumpMap.y * input.binormal + bumpMap.z * input.normal;
	bumpNormal = normalize(bumpNormal);

	// light
	lightDir = -lightDirection;
	lightIntensity = saturate(dot(lightDir, bumpNormal));
	color = saturate(diffuseColor * lightIntensity);

	color = color * textureColor;
		
    return color;
}
